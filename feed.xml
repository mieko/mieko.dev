<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mieko's nerd rants</title>
    <description>Mike Owens (mieko) Nerd Rand Blog
</description>
    <link>https://mieko.dev/</link>
    <atom:link href="https://mieko.dev/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Oct 2019 04:10:20 -0400</pubDate>
    <lastBuildDate>Mon, 21 Oct 2019 04:10:20 -0400</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Understand the Actual Costs of Building (or defer to someone who does)</title>
        <description>&lt;p&gt;I’ve got experience in a lot of totally different industries, so my anecdotes and analogies are all
over the map.&lt;/p&gt;

&lt;p&gt;This is a housekeeping parable, but relates to software:  A lesson built around one of the
smartest, most well-intentioned, and hardworking people I’ve ever met.  A facilities manager at my
commercial housekeeping laundry.  But she made a mistake by not fully understanding costs.&lt;/p&gt;

&lt;p&gt;My housekeeping operation has to provide those little foam dish scrubbing pads when we clean a room.
They’re ultra-boring scouring pads.  They’re included in the fixed cost we charge after cleaning
the room, so we have an incentive to keep the costs down on these things, within reason of
suitability.&lt;/p&gt;

&lt;p&gt;We had a vendor for them, and they came in once a week. Each one was tossed into a bag with all of
the other, similarly boring items (toilet paper, soap, etc) and went out into rooms.&lt;/p&gt;

&lt;p&gt;One day, while ordering, she noticed we could get scouring pads that were twice as wide and twice
as tall as what we needed, for only double our cost.  But we could get four out of each of them if
we just cut them down.  Basically cutting our scouring pad costs in half.&lt;/p&gt;

&lt;p&gt;She ordered a pretty hefty cloth slicer for the job, only $40 or so, and a one-time purchase.
The new, over-sized scouring pads started coming in.  Boxes at a time.  During workday lulls, she’d
go to our prep room and slice them into quarters.  They were indistinguishable from what they
replaced.&lt;/p&gt;

&lt;p&gt;Our laundry staff normally prepares these bags that go out to rooms, so she trained them to slice up
the pads, too.&lt;/p&gt;

&lt;p&gt;A couple of things have already gone wrong: she failed to take into account her hourly rate.  She
had a good attention to detail, and her partitioned pads came out great.  And she was as fast at
it as a human could be expected to be.&lt;/p&gt;

&lt;p&gt;When &lt;em&gt;she&lt;/em&gt; was quartering the pads, she didn’t realize that the actual cost to the company had
tripled vs. the ones we had been using previously.  Her laundry subordinates didn’t make
as much as she did.  When &lt;em&gt;they&lt;/em&gt; were quartering the pads, the company cost had merely doubled.&lt;/p&gt;

&lt;p&gt;Except sometimes, the pads would come out wrong.  They’d be cut misaligned, and we cannot send a
trapezoid out onto property.  This came up a few times, so after a while, she had to inspect the
output of her staff.  Sometimes she’d be too busy, and these weird trapezoid pads would find their
way into bags.  That means the housekeeper had to call up an inspector to get another one if she
didn’t have a spare.&lt;/p&gt;

&lt;p&gt;Sometimes the inspector would have to drive a few miles across the property to fetch more if they,
too, had exhausted their supply.  And sometimes the housekeeper wasn’t paying attention, and placed
a weirdly cut scouring pad on the sink.  So the inspectors had to check every room they inspected
with special detail on the scouring pad.&lt;/p&gt;

&lt;p&gt;Sometimes, a shipment would be late.  Our delivery driver would show up, heroically, just at the
last minute.  Right when we needed more scouring pads, like &lt;em&gt;now&lt;/em&gt;.  But we couldn’t just throw them
into bags, we’d have to appropriate extra people, some of which were never actually trained in the
fine art of scouring pad slicing, onto the project.  Thus generating more trapezoids.&lt;/p&gt;

&lt;p&gt;With all of these cascading effects, scouring pads, one of the simplest parts of what we do,
probably reached 4-5% of the cost of cleaning a room.  It was in the tenth-of-a-percent range
before this cost optimization.&lt;/p&gt;

&lt;p&gt;Developers are not asked to pay for the services we rely upon to make our products work.  Developer
time is the largest expense we have.  It may feel “free” to a developer, or even personally
profitable, but most of the time, if we can pay for a service that specializes in what we need it
to do, competently, it’s probably our best choice to pay, unless a good argument can be made
otherwise.&lt;/p&gt;

&lt;p&gt;Sometimes the cost is so low, just the few-hour debate on a ticket would’ve already bought us
months of service.&lt;/p&gt;

&lt;p&gt;We don’t set up our own mail servers and IRC channels and SCM hosting anymore for a reason.  It is
dramatically cheaper to hire it out if you’re not doing it on your own time, as a hobby, for free.&lt;/p&gt;

&lt;p&gt;And the companies we pay to handle this stuff are experts: way better than the half-assed efforts
we could afford to put toward it, as it’s not our core competency.  And what we get isn’t some
shitty misaligned trapezoid version, either.&lt;/p&gt;

&lt;p&gt;Don’t write what ends up being thousands of dollars worth of code (from a company cost perspective)
to save $7 or $50 or probably even $1000/m.  I’m open about costs.  Sometimes paying $1000/m is
placed head-to-head against company costs many times over in terms of maintenance and development.&lt;/p&gt;

&lt;p&gt;If my facilities supervisor had asked first, I would’ve told her it’s not even worth optimizing,
but there are other things we could address that &lt;em&gt;would&lt;/em&gt; have a real effect on the bottom line.&lt;/p&gt;

&lt;p&gt;Things that if she attacked, would put thousands of dollars a month back into the budget.  And
that’s where raises and holiday bonuses and all that come from.&lt;/p&gt;

&lt;p&gt;We went back to the normal scouring pads.  We even gave away a dozen boxes of the oversized ones to
rid ourselves of that problem.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Jan 2019 09:25:00 -0500</pubDate>
        <link>https://mieko.dev/software/2019/01/16/understand-costs.html</link>
        <guid isPermaLink="true">https://mieko.dev/software/2019/01/16/understand-costs.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Boring Verticals and Consumer Grade Software</title>
        <description>&lt;p&gt;What’s “boring vertical software”?  The software people doing boring, but important jobs have
to use to get their jobs done.  You have to use it every day to get paid.  You use fun software by
choice.  You use boring vertical software because you have to.&lt;/p&gt;

&lt;p&gt;You know, someone had to write the code that lets a plant operator drop hot asphalt into
truck beds.  And then someone had to write the software that calculates price-per-ton and lets
their accounting department bill for it.&lt;/p&gt;

&lt;p&gt;Ever wonder what’s on the other side of the screen when the person at the DMV is clacking away.  Can
you imagine what it looks like?  Do you think it’d operate the same way if it came from a software
company that had to win market share by making their &lt;em&gt;users&lt;/em&gt; (not just customers) happy in the open
market?&lt;/p&gt;

&lt;p&gt;Some of this stuff is ultra-niche.  Software that might have just hundreds or thousands of users
across the planet.  These projects always have a few things in common:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It’s always ultra-expensive (to someone).  When you’re trying to spread your development costs
across a small market, you live in a different universe than companies who consider “the
entire global population” their target market.  What do you think Facebook would cost if they
were selling it to factories as an internal communication tool?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They’re always universally hated by the people that actually &lt;em&gt;interact&lt;/em&gt; with them.  Some manager
decided what carrot-counting software you were going to use when he made the deal on a
golf course.  He doesn’t know how well it works.  &lt;em&gt;You&lt;/em&gt; knowing it’s stupid having to click
through three slow-loading screens to reject a carrot is not going to have an effect on the
bottom line of the vendor.&lt;/p&gt;

    &lt;p&gt;Your boss doesn’t care; the vendor doesn’t care.  It’s not cost effective.&lt;/p&gt;

    &lt;p&gt;The firms bidding don’t have to win &lt;em&gt;you&lt;/em&gt; over with ease of use or the features you need,
but just have to win over the &lt;em&gt;decision maker&lt;/em&gt;.  This is why Oracle is still operating after
in the current millennium.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lock-in.  The software developers that target most verticals have little influence over the
size of the market they serve.  They &lt;em&gt;serve&lt;/em&gt; that market, not drive it.  They cannot project
or control segment growth, so they try their best to handcuff every customer they get.&lt;/p&gt;

    &lt;p&gt;AWS losing &lt;em&gt;a&lt;/em&gt; customer isn’t a big deal.  Imagine how AWS would be engineered if each customer
they lost wouldn’t just round off in a few decimal places on a spreadsheet.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m working on it, and haven’t done it yet, but I think there’s a clear path to disrupting markets:
write “Consumer Grade” software for “Manager Grade” industries.  And in software, “Consumer
Grade” is a great thing.&lt;/p&gt;

&lt;p&gt;Consumer Grade (capitalization intended) means you’re focused on the people who use it everyday.  It’s
been tested by consumers.  You add features that the person-working-for-the-person-who-buys-it can’t
live without.  Like you care about their experience, ya know?&lt;/p&gt;

&lt;p&gt;Google Maps is Consumer grade.  You’d switch if something better came out.  They know it.  The
weird stuff you have to use because it’s the only thing that can talk to your $30,000 robot oven is
not.&lt;/p&gt;

&lt;p&gt;iOS is consumer grade.  The shitty timeclock web app your boss makes you use is not.&lt;/p&gt;

&lt;p&gt;GitHub is consumer grade.  The weird ticketing, escalation, and chat system you use at the call
center is not.&lt;/p&gt;

&lt;p&gt;Consumer grade is one of the hardest expectations to live up to.  How many weeks of training did you
have to sit through learn how to use YouTube?  Do you think YouTube is less complicated than the
stuff you use at work?&lt;/p&gt;

&lt;p&gt;Are you a software entrepreneur?  What’s something that’s &lt;em&gt;not software&lt;/em&gt; that you know well?  Look
at what people in that industry have to use every day.&lt;/p&gt;

&lt;p&gt;Write a version of it that looks and feels like it could’ve come from the valley, not Initech.  If
it checks off all the features the industry needs, but doesn’t operate like a thin, clunky layer
over an Access database, I bet you’ll get traction.  Even decision makers only have to see it once
to know there’s something else out there.&lt;/p&gt;

&lt;p&gt;Did you miss out on the Web 2.0 hype in the mid-2000s?  There are billions of dollars worth of
software to be sold to markets that just wish they had something that’s accessible via the web.  It’s
even crazier if you could operate it with a phone.  You might be competing with stuff that runs on
DOS or is a VB application.  In 2018.  And it’s probably crazy-expensive.  No one can ignore that.&lt;/p&gt;

&lt;p&gt;Find a market that’d make you money while replacing Manager Grade software.&lt;/p&gt;

&lt;p&gt;meter.md is in a market that’s all Manager Grade software.  The revamp we’re going through now is
trying to make it as Consumer Grade as possible.  Just because you wouldn’t use it if you weren’t in
the industry doesn’t mean it has to be terrible.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Dec 2018 04:51:00 -0500</pubDate>
        <link>https://mieko.dev/software/2018/12/23/boring-verticals.html</link>
        <guid isPermaLink="true">https://mieko.dev/software/2018/12/23/boring-verticals.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Responsible Disclosure, and the Scourge of Internal IT</title>
        <description>&lt;p&gt;Google’s recent disclosure of a bug in Windows after a seven day hold has caused some complaining.
I’m not going to repeat the story other than to provide a little context for this rant, but it
boils down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is an exploit in the wild that is actually being used to compromise Windows machines.
Google pinned it down and gave Microsoft only seven days to respond before disclosing.&lt;/li&gt;
  &lt;li&gt;Microsoft isn’t too happy about the duration of this window, and asked for an extension
because they have an established workflow in place to handle things like this.&lt;/li&gt;
  &lt;li&gt;Microsoft’s process (“Patch Tuesday”) was, as far as I can tell, brought about because IT
departments inside of many businesses wanted (“needed”) a predictable update schedule.  I’d
bet the lag was spent trying to work it into this patch cycle.&lt;/li&gt;
  &lt;li&gt;None of this  works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is only peripherally related, but I’ll take any excuse I can to run off at the mouth about
how terrible present-day corporate IT is.&lt;/p&gt;

&lt;p&gt;Bad IT departments have ruined software and the internet for too long.  It seems like they spend
the majority of their salaried hours figuring out how not to do their job.&lt;/p&gt;

&lt;p&gt;Here’s how IT should break down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Employees need to use computers and networks to be effective at their jobs, many of which are
actually revenue-generating, instead of the cost center that is IT.&lt;/li&gt;
  &lt;li&gt;IT should be there to enable and support these operations, and the proper functioning of the
overall company infrastructure.  A lot of times that means protecting employees from
themselves, and saying no and locking down stuff.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instead, it’s turned into:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Employees need to be able to use up-to-date browsers and software to be able to accomplish
their job more effectively than they did last year.  Some of their competitors have newer,
smarter, systems, and management expects more per week than last year.&lt;/li&gt;
  &lt;li&gt;IT finds a way to excuse &lt;em&gt;doing absolutely nothing&lt;/em&gt;.  They literally have to be drug into and
usually &lt;em&gt;past&lt;/em&gt; end-of-life notices from software vendors, and then whine about having to take
action.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So software providers caught on to the fact that your average IT department is either grossly
incompetent, or have the work ethic of the DMV.  They started providing solutions: packaged-in,
on-by-default anti-malware.  Auto-updating “evergreen” browsers.&lt;/p&gt;

&lt;p&gt;IT whines because they “can’t allow software to update itself without our knowledge”.  But then
they do nothing.  Except try to stretch another few years out of IE6.&lt;sup id=&quot;fnref:upgrade&quot;&gt;&lt;a href=&quot;#fn:upgrade&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;A lot of software companies figured this stuff out a while time ago.  Hence the rise of “devops”.
It’s a way of saying “doing nothing forever is not doing your job, and be on-point, or the
developers will &lt;em&gt;drag&lt;/em&gt; you along.”  A SaaS provider is not going to be hamstrung because an IT
department refuses to add a firewall rule, or update PostgreSQL after 2004: their productivity
depends on it.&lt;/p&gt;

&lt;p&gt;The client-side corporate end doesn’t have such internal advocates, so they languish in insecurity
and workarounds for long-fixed bugs forever.&lt;/p&gt;

&lt;p&gt;I’d wager that the average consumer-purchased and maintained desktop is more secure &lt;em&gt;and&lt;/em&gt;
featureful than one that has a team of “professionals” “supporting”&lt;sup id=&quot;fnref:scare&quot;&gt;&lt;a href=&quot;#fn:scare&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; it in a business
context.  Because the every day consumer has no policies that force them to turn off automatic
security updates, use old software that has known issues, or disable modern security features.&lt;/p&gt;

&lt;p&gt;I’ve never seen a field where my expectations of the level of competency and the actual level of
competency are so wildly mismatched.&lt;/p&gt;

&lt;p&gt;Microsoft caters to this because it’s their bread and butter.  They’ve built processes around
dealing with organizations like that. I get it.  But that Microsoft is beholden to lame IT
departments does not place Google at fault for not playing along.  It’s a corner that part of the
industry has painted themselves into, and the rest of the world shouldn’t have to unknowingly
suffer the repercussions of not having timely disclosure.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:upgrade&quot;&gt;

      &lt;p&gt;I’ve virtualized ancient business-critical Unix systems when the company could no longer buy
hardware replacements.  I’ve set up access to an otherwise network-isolated Windows server over
VNC because it couldn’t run a secure browser (or a modern RDP).  In either case, I knew these
problems had answers beyond “everyone runs IE6 forever”, or “we can’t do anything about that.”&lt;br /&gt;
If you’re in IT, and you’re getting paid to solve problems like that, it’s your &lt;em&gt;job&lt;/em&gt; to figure
it out.  “Do nothing” isn’t a solution.  I’ve started calling these types of IT departments
“printer driver specialists”. &lt;a href=&quot;#fnref:upgrade&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scare&quot;&gt;
      &lt;p&gt;I’m going to break my keyboard scare-quoting so hard. &lt;a href=&quot;#fnref:scare&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 05:05:00 -0400</pubDate>
        <link>https://mieko.dev/security/2016/11/01/responsible-disclosure-and-the-scourge-of-internal-it.html</link>
        <guid isPermaLink="true">https://mieko.dev/security/2016/11/01/responsible-disclosure-and-the-scourge-of-internal-it.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>I Can't Make Myself Care about the Speed of my Code Editor</title>
        <description>&lt;p&gt;Above a certain minimum usability threshold, I don’t care how fast my code
editor performs.  I don’t care if it can open a 2GB SQL dump.  I care about
features that make me more effective while writing &lt;em&gt;code&lt;/em&gt;.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;And you get those features through breadth.  And you get breadth through
ecosystem.  And you get ecosystem via programmer accessibility.  And that
accessibility has a good chance of making you slow.  I’m fine with that.&lt;/p&gt;

&lt;p&gt;To me, a “code editor” lives in that spot above a text editor, which has no
conceptual understanding of the language you’re writing in, and a full-blown
IDE, which does. A code editor has a &lt;em&gt;shallow understanding&lt;/em&gt; of your language.
Enough to syntax highlight, draw red squiggles under words, maybe ctags-style
rudimentary navigation.  You know.&lt;/p&gt;

&lt;p&gt;Now, people like to whine about it, but an IDE has a total out for being slow.
It’s doing a &lt;em&gt;lot&lt;/em&gt; of work.  A lot of them literally run a compiler front-end
over your buffer every few key-strokes.  They constantly re-index a huge amount
of open buffers and closed files to resolve references, so you can click on
&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; and bring yourself to the documentation or header file.&lt;/p&gt;

&lt;p&gt;The engineering effort required to do all of that in real-time is huge.  Which
is why most IDEs focus on &lt;em&gt;a&lt;/em&gt; language, or &lt;em&gt;a few related&lt;/em&gt; languages.  It’s a
depth vs. breadth thing.&lt;/p&gt;

&lt;p&gt;In my day to day work, I need a &lt;em&gt;lot&lt;/em&gt; of breadth.  That’s sort of the nature/
nightmare of modern web and mobile development.  And you get breadth by making
your editor easy to extend.&lt;/p&gt;

&lt;p&gt;A while after Chrome came out, it got a lot of flak when they revealed its
extension system.  It was &lt;em&gt;really&lt;/em&gt; simple compared to Firefox’s, and offered
nowhere near the same capability.  Around the same time, they decided to
remove the “View Background Image” context menu item.  I thought this was a
good excuse to play with the extension API.  After about an hour, I had
&lt;a href=&quot;https://gist.github.com/mieko/a6a16d239d8179fd8b771322dfa4706f&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having written Firefox add-ons (And previously, the worst experience this side
of autotools: &lt;em&gt;Mozilla Browser extensions&lt;/em&gt;), I knew immediately that this was
the way to go.  What it lacked in capability, it made up for in approachability.&lt;/p&gt;

&lt;p&gt;When a programmer doesn’t face a huge uphill battle to scratch their itch, they
actually will.  And, being the helpful (AKA vain) species we are, we’ll
publish it.&lt;/p&gt;

&lt;p&gt;I moved to Atom a few years ago, when it &lt;em&gt;barely&lt;/em&gt; hit the minimum bar for
speed.  Hell, it still lacked a lot of features I really wanted.  But it had
the few things I knew it &lt;em&gt;had to have&lt;/em&gt; to end up useful to me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It was (eventually) open source.  I change code editors about as often as
I plan on changing spouses, so I wasn’t going to risk having my muscle
memory re-trained on something that would end up abandoned.  Enough people
outside of GitHub care about Atom that I know it won’t end up useless if
the original authors call it a day.&lt;/li&gt;
  &lt;li&gt;It had a straightforward plugin API that people were actually using
en-masse.  It did this by shoving a browser and JS runtime into a binary
and developing on top of that.  Crazy times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a programmer, I’m not a fan of Javascript.  I’m not a fan of “Classic
Javascript”.  I’m not a fan of “Modern Javascript”.  I think The Good Parts are
half-assed.  But you can’t avoid it, and there’s a huge mass of people with
much worse taste than myself eager to write Javascript.&lt;/p&gt;

&lt;p&gt;And if you want an editor with breadth, you need an army of people contributing
to the ecosystem.  And you do that by making it easy for them to scratch their
itch by using technologies that they’re familiar with.  Even if that means
benchmarks put you at a quarter the rendering speed of SublimeText.&lt;/p&gt;

&lt;p&gt;Even if that means “it gets unusably slow when I open &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/hda&lt;/code&gt;”.&lt;/p&gt;

&lt;p&gt;Even if that means &lt;em&gt;I&lt;/em&gt; have to write Javascript to extend it.&lt;/p&gt;

&lt;p&gt;This perspective doesn’t apply to all fields.  Postgres or Linux would be a
disaster prioritizing like this.  But weirdly enough, &lt;strong&gt;a code editor needs
network effects&lt;/strong&gt;.  Really bad.&lt;/p&gt;

&lt;p&gt;If you felt burnt by the SublimeText thing (I was), or the TextMate thing
(skipped that one), consider this point.&lt;/p&gt;

&lt;p&gt;An editor thats an order of magnitude faster than Atom means nothing to me if
it’s not at least &lt;em&gt;approaching&lt;/em&gt; feature parity, ecosystem included.&lt;/p&gt;

&lt;h2 id=&quot;bonus-a-mini-rant-about-hardware-and-tooling&quot;&gt;Bonus: A Mini-Rant about Hardware and Tooling&lt;/h2&gt;

&lt;p&gt;VSCode is pretty awesome.  I’ve played with it a lot over the last two months.
I need multiple project folders, blah, blah…, but it’ll get there.&lt;/p&gt;

&lt;p&gt;People tell me it’s faster than Atom.  I’ve read it enough to believe it, but
I can’t tell.  And I spend half my time on a 2011 mid-range iMac.  And before
that, when Atom was slower, Ubuntu + an Acer laptop that was so old that the
battery was more likely to catch fire than hold a charge.&lt;/p&gt;

&lt;p&gt;What are you people coding on?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Well, every morning I have to manipulate a 3GB nginx log file as an
integral part of my job.  Atom and VSCode are useless because they can’t
handle this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I understand that not everyone “thinks in Unix”, but when I was using Vim for
&lt;em&gt;everything&lt;/em&gt; (for over a decade), which can handle files that size just fine,
it still didn’t feel like a problem with “an editor solution”.  It felt like a
problem for &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I wouldn’t get too attached to a hex editor unable to deal with large/huge
files.  I expect it to handle an edit to a BluRay ISO file’s header or
whatever.&lt;/p&gt;

&lt;p&gt;But I want my code editor to provide the best experience it can for editing
code.  You know: Text files, typically a few hundred lines, maybe a few thousand
lines if you’re on a shitty project or hand-editing generated code like a shitty
programmer.  A tradeoff made that sacrifices &lt;em&gt;anything&lt;/em&gt;  for a dealing MB+
log files was chosen poorly.&lt;/p&gt;

&lt;p&gt;Yeah, we’d all like a Wrangler that can climb over a building, and then do 0-60
in 4 seconds from stoplight.&lt;/p&gt;

&lt;p&gt;In reality, the things that make a Wrangler good at what it does are directly at
odds with what makes a Model S awesome.  And in software, it doesn’t even have
to be an engineering trade-off: it can be man-power, feature priorities, or
choosing an architecture that sucks for edge cases but optimizes for ecosystem.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;This is inspired by a recent event where Atom got ultra slow: I pasted a 15KB
single-line of Base64-encoded PNG into a vCard for compatibility testing.&lt;/p&gt;

      &lt;p&gt;I wouldn’t want Atom to be optimized for stupid cases like this at the
expense of &lt;em&gt;anything&lt;/em&gt; else.  There are maybe a dozen times in the last decade
where handling that better would’ve been useful.  Keep improving highlighting
and tree-views and linters and panes and the extension APIs.  You know, code
stuff that brings benefit every day. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 05:50:00 -0400</pubDate>
        <link>https://mieko.dev/tools/2016/10/11/i-cant-make-myself-care-about-the-speed-of-my-code-editor.html</link>
        <guid isPermaLink="true">https://mieko.dev/tools/2016/10/11/i-cant-make-myself-care-about-the-speed-of-my-code-editor.html</guid>
        
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Stop Babysitting My Permissions</title>
        <description>&lt;p&gt;The traditional Unix permission bits aren’t that complicated:&lt;/p&gt;

&lt;p&gt;User, Group, Other.
Read, Write, eXecute.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;They’ve been successful because they allow you to express a lot of scenarios
without getting crazy-complicated. It’s hard to create an incomprehensible
situation with them.&lt;/p&gt;

&lt;p&gt;You do hit the limitations of the scheme, though: There are times where you
think: &lt;em&gt;“Man, I wish this group could write, but this other group could only
read”&lt;/em&gt;. But those don’t pop up as often as I would’ve guessed. I can live
with it.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Anyway, these permissions are there so we can control access to files in a
more granular way than yes/no or “is this my file?”. The group ids and group
permission sets are a useful tool for a lot of models.&lt;/p&gt;

&lt;p&gt;But even with the limited permissions Unix allows me to express, my biggest
permission headache has nothing to do with it. It’s shit like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0640 for 'nodes/postgres-client-b8792tmG/ssh.key' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &quot;nodes/postgres-client-b8792tmG/ssh.key&quot;: bad permissions
Permission denied (publickey).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PGSSLKEY=/etc/ssl/metermd/postgres-client.key
cult@postgres-client-b8792tmG:~$ psql -h postgres-server-Qy6Jnwj7
psql: private key file &quot;/etc/ssl/metermd/postgres-client.key&quot; has group or
      world access; permissions should be u=rw (0600) or less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The group in question that has a &lt;code class=&quot;highlighter-rouge&quot;&gt;+r&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres-client&lt;/code&gt;. I may want to
add users to that group to give them access to the keys. You know, like what
Unix permissions were designed to do.&lt;/p&gt;

&lt;p&gt;You know, like the examples &lt;em&gt;exactly like this&lt;/em&gt; in textbook chapters that
explain how users, groups, and permissions work, and when you’d want to set
group permissions.&lt;/p&gt;

&lt;p&gt;Invariably, these are fatal, with no switch like
&lt;code class=&quot;highlighter-rouge&quot;&gt;--im-using-permissions-as-designed-not-because-im-stupid&lt;/code&gt; override switch, or
better, an environment variable that can be set once.&lt;/p&gt;

&lt;p&gt;Instead, I now have to script brainless tools like this, and decide where to
put them in the provision process:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; cmp &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GLOBAL_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 0700 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GLOBAL_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rw,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;,o&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER_KEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of this is to basically convince OpenSSH and PostgreSQL that I’m not
fucking up.&lt;/p&gt;

&lt;p&gt;This also means I end up with a handful of copies of keys scattered around with
different owners that I have to chase during key rotation.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I get what the motivation is, and a warn-by-default would be OK.  But stop it.&lt;/p&gt;

&lt;p&gt;Unix permissions don’t give us lot of options here: don’t take away the few it
&lt;em&gt;does&lt;/em&gt; give us.&lt;/p&gt;

&lt;p&gt;^D&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;We’ll ignore sticky/set[gu]id/search to keep this on-point. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;

      &lt;p&gt;I know there are a lot of Sheldons screaming about ACLs, and that you need
a Turing-complete algebraic expression engine to properly express effective
permissions in the real world. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;

      &lt;p&gt;Soft link permissions are generally ignored in normal situations.
Hard links cannot cross filesystem boundaries. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 15:53:00 -0400</pubDate>
        <link>https://mieko.dev/infra/2016/09/25/stop-babysitting-my-permissions.html</link>
        <guid isPermaLink="true">https://mieko.dev/infra/2016/09/25/stop-babysitting-my-permissions.html</guid>
        
        
        <category>infra</category>
        
      </item>
    
      <item>
        <title>systemd: I'm Totally Sold</title>
        <description>&lt;p&gt;I’ve been out of the “devops” game for a while, since it was just called
“admin”. So while I had read about the systemd/upstart wars, everything just
kept working for me, so I didn’t pay too much attention.&lt;/p&gt;

&lt;p&gt;When I had to take up parts of the ops role again at meter.md, it seemed like a
lot had changed: sysvinit was dead, upstart had came and gone, systemd won, but
it seemed like everyone hated it.&lt;/p&gt;

&lt;p&gt;Circa 2000 or so, I wrote, but never released, a dependency-based half-assed
init called finitd (in C, totally unrelated to the Python utility that a web
search will find you). It did the notify-pid-1-via-a-socket-thing that was
managed by client programs talking to the daemon. I had utilities called cute
things like &lt;code class=&quot;highlighter-rouge&quot;&gt;wants&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;needs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;provides&lt;/code&gt; that were placed at the
beginning of the init script’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; before it was executed. They’d notify
and and block as required. The scripts ended up about as readable as a
script-based solution could be, a typical service like Apache being less than
a screen-full of code.&lt;/p&gt;

&lt;p&gt;I didn’t have cgroups or dbus, and I had the notion that it’d be Unix-
portable, so I got to avoid those decisions. I had converted my SuSE machine
to launch with it, writing startup scripts that’d bring up system services all
the way through XFree86 and KDM/KDE2. Spending two weeks sitting in hotel
rooms from 7PM to 2AM with gcc-2.95 and W. Richard Stevens’ &lt;em&gt;Advanced
Programming in the Unix Environment&lt;/em&gt;&lt;sup id=&quot;fnref:apue&quot;&gt;&lt;a href=&quot;#fn:apue&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; pretty much solidified my alliance with
Unix: writing finitd basically just re-wired me to think in terms of Unix, and
I haven’t been able to shake it since.&lt;/p&gt;

&lt;p&gt;What sparked the ~6K lines that became finitd was basically being totally
pissed at sysvinit. I’d do anything to avoid having to write an init script
for an application I was writing. It was a pain in the ass. They were hard
to properly test. They were inherently non-portable. And above all, it just
seemed like busywork.&lt;/p&gt;

&lt;p&gt;It seems like similar approaches were explored around the same time by other
people, and never quite caught on. I didn’t bother with releasing or promoting
finitd because I really had nothing to gain from it: and it’d just get picked
apart and I’d spend all day arguing on Slashdot about it, much the way Lennart
and crew had to on Hacker News through the eventual semi-acceptance of systemd.&lt;/p&gt;

&lt;p&gt;Anyway, the point of this story is: I had a huge tribal need to defend “the
Unix way”, and I think finitd exemplified that. And it worked. But even with
years of polish, it wouldn’t have touched half the surface area of solved
problems systemd does with its approach.&lt;/p&gt;

&lt;p&gt;There are a few things in Unix that hung around just way too long. The tty/pty/
terminal abstraction needs to be stripped down to the parts that are still
useful. crond should’ve been replaced long before systemd had a chance to take
it on. The &lt;code class=&quot;highlighter-rouge&quot;&gt;fork(), fork(), setsid()&lt;/code&gt; dance and &lt;code class=&quot;highlighter-rouge&quot;&gt;daemon()&lt;/code&gt; should’ve been long
dead, because we could’ve had supervisors as smart as systemd 20 years ago.&lt;/p&gt;

&lt;p&gt;A few days ago, during the middle of task, I naturally just had the thought:
“…and now I’ll just write a quick systemd unit for that.”&lt;/p&gt;

&lt;p&gt;That’s when I realized systemd had really become a great thing for
administrators. I first looked into systemd &lt;em&gt;at all&lt;/em&gt; by necessity just a few
weeks ago, and I had already assimilated the idea that “a quick systemd unit”
is a Real Thing in my toolbox, and had become part of my mindset.&lt;/p&gt;

&lt;p&gt;I write systemd units like I edit config files. I write scripts that generate
systemd units. These are things I avoided with sysvinit and /etc/rc for years.&lt;/p&gt;

&lt;p&gt;On the other side, these days I write my daemons like a normal program without
any gymnastics. I run in the foreground. I only fork when I &lt;em&gt;need&lt;/em&gt; to fork.
I don’t have flags like &lt;code class=&quot;highlighter-rouge&quot;&gt;--detach&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-daemon&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--foreground&lt;/code&gt;.
I don’t &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog()&lt;/code&gt;, I log messages to STDOUT and STDERR. I don’t create a
pidfile. I exit with a return code from main like the prophets Ken and Dennis
intended. I don’t &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;setuid&lt;/code&gt; for security. I don’t load a
.conf file if all I need are a few values that can be expressed in environment
variables.&lt;/p&gt;

&lt;p&gt;The first few lines of running code are on their way to completing its task,
not dragging around 30 years of Unix daemon boilerplate. That stuff is handled
in like 10 lines of systemd, and if they disagree with the user’s use-case,
they’re editable without learning another config file format.&lt;/p&gt;

&lt;p&gt;I don’t get the argument that systemd is desktop-centric. On Linux desktops,
I could literally never touch the init system and get by fine not caring. On
servers, I’m using for really useful stuff constantly.&lt;/p&gt;

&lt;p&gt;I don’t give a shit about what it does on a desktop. I don’t care about
startup time: we kill and image nodes 5x as often as we reboot them. From a
manageability standpoint, though, I do know that I’d trade a decent amount of
niceties on macOS to get systemd instead of the “can’t force myself to clutter
my thoughts with this” launchd&lt;sup id=&quot;fnref:launchd&quot;&gt;&lt;a href=&quot;#fn:launchd&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;systemd is bigger than some people like, and I haven’t even touched on timers
or socket activation or disks or the other stuff systemd subsumed.&lt;/p&gt;

&lt;p&gt;The difference is: If nothing else, systemd  made large parts of this stuff
actually useable by people other than package-maintainers and OS integrators.
And it’ll continue to take logic out of init scripts and eventually &lt;em&gt;even the
running daemons themselves&lt;/em&gt; if the model continues to hold.&lt;/p&gt;

&lt;p&gt;But the real bullshit argument here is the “Unix Way” one. The “my init system
shouldn’t care about my mountpoint and cdroms and network events” one.&lt;/p&gt;

&lt;p&gt;We’re using a distributed filesystem holding user data, and we have daemons
that operate on this data.&lt;/p&gt;

&lt;p&gt;The systemd way of handling this turns into a task that depends on the network,
and then depends on a service (glusterfs) to launch, and then ensures that the
network filesystem is mounted, before launching our tool at specified intervals
throughout the day. This isn’t stuff we can just leave to the default packaged
configs. It’s like two-dozen declarative lines because systemd knows about all
this stuff, and how they relate to each other: The network, launching daemons,
mount events, timers.&lt;/p&gt;

&lt;p&gt;What’s the alternative “Unix philosophy” way?  We have perfect single-purpose
tools for each of these. We’ll have sysvinit or rc.d, and then set up ifupdown
hooks if we wan’t to be informed when the network starts and stops, and  we’ll
have scripts calling out to mount when we need to, and use cron for scheduling.&lt;/p&gt;

&lt;p&gt;Everything perfectly handling its one piece of the problem.&lt;/p&gt;

&lt;p&gt;So how do we orchestrate all this stuff together, to actually solve our
particulars?  Simple: a fucking 500 line init script that ends up looking
a &lt;em&gt;lot&lt;/em&gt; like sysvinit.&lt;/p&gt;

&lt;p&gt;The complexity systemd’s “overreaching bloat” handles is our complexity now.&lt;/p&gt;

&lt;p&gt;And our implementation won’t be as battle-tested.&lt;/p&gt;

&lt;p&gt;And it’ll be written in bash.&lt;/p&gt;

&lt;p&gt;Good luck with that.&lt;/p&gt;

&lt;p&gt;If that’s the Unix Way people want, I’ve lived it, and they can keep it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(You’ll notice we have no comments here: This is a one-way trash-talking
soapbox, and I can never be wrong if I don’t see rebuttals.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;^D&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:apue&quot;&gt;

      &lt;p&gt;APUE is vastly underrated, even today. I consider it the closest thing to
a Unix programing bible as has ever been written. Regardless of your
experience level, reviewing APUE every other year will remind you of
&lt;em&gt;something&lt;/em&gt; that’ll end up applicable soon. The later editions,
co-authored by Stephen A. Rago after Mr. Steven’s passing, are equally
excellent. Keep it next to Knuth and the Dragon Book on the shortlist.
My attachment to this book and era makes it the only book that just feels
wrong if it’s not a physical copy. &lt;a href=&quot;#fnref:apue&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:launchd&quot;&gt;

      &lt;p&gt;Please don’t bring launchd as it exists on macOS into the BSDs. There, we
need something declarative and more modern, but not launchd as-is. I’ve
been told the “problem with launchd” is actually “the problem with
launchctl” which does the crazy XML thing.&lt;/p&gt;

      &lt;p&gt;If I were tasked with solving this, I’d start from the systemd Unit file
format and work myself backward. The language has the right balance of
simplicity, and enough outs and options to actually express the zoo of
services you’d actually need to handle.&lt;/p&gt;

      &lt;p&gt;Of course, because surely someone will come up with &lt;em&gt;obviously superior&lt;/em&gt;
nouns, verbs, and comma placements, this will never happen, and I’ll (not?)
be writing writing two service descriptions in 20X6. &lt;a href=&quot;#fnref:launchd&quot; class=&quot;reversefootnote&quot;&gt; ^^ &lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Sep 2016 10:07:00 -0400</pubDate>
        <link>https://mieko.dev/infra/2016/09/25/systemd-im-totally-sold.html</link>
        <guid isPermaLink="true">https://mieko.dev/infra/2016/09/25/systemd-im-totally-sold.html</guid>
        
        
        <category>infra</category>
        
      </item>
    
      <item>
        <title>pgpool-ii in Practice</title>
        <description>&lt;p&gt;pgpool-ii is awesome. We don’t have it in production yet, but have a staging
environment and have run it through production-scale loads, and are getting
ready. Here’s a few tips:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Pretend it doesn’t support SSL at all.&lt;/em&gt;  On the frontend-side, it has no
hostname mapping (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;hostssl ... cert clientcert=1&lt;/code&gt;, etc). On the
backend side, it has no way to specify a separate SSL key pair than
the front-end, has no way to force things like &lt;code class=&quot;highlighter-rouge&quot;&gt;sslmode=verify&lt;/code&gt;, and
doesn’t use libpq, so it doesn’t support configured conninfo strings or
environment variables. Just wrap it in stunnel. On both sides. Yeah.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since you’ve now got pgpool operating on local sockets, you’d think you
can set &lt;code class=&quot;highlighter-rouge&quot;&gt;listen_addresses = ''&lt;/code&gt; as the docs state. Unless you’re using
3.5.4, which was just released and isn’t readily packaged yet, there’s a
bug that’ll stop you from launching with that setting. So let it listen
on localhost on a bullshit port and firewall it for now. Note: Your port
setting will effect the name of the socket files it generates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stunnel has a &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol = pgsql&lt;/code&gt;, which is exactly what you want for the
local socket to postgres backend connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol = pgsql&lt;/code&gt; doesn’t imply &lt;code class=&quot;highlighter-rouge&quot;&gt;options = NO_TICKET&lt;/code&gt;, which is required,
because the postgresql server doesn’t support session tickets, and will
promptly kick you after the first connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Item #4 is hard to debug when your path is: client → stunnel → pgpool →
stunnel → postgres.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/mieko/a075f9ce8cb8fd5c68fed310acebe449&quot;&gt;Just work off of these hard-fought stunnel configs.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;^D&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 15:52:14 -0400</pubDate>
        <link>https://mieko.dev/infra/2016/09/24/pgpool-ii-in-practice.html</link>
        <guid isPermaLink="true">https://mieko.dev/infra/2016/09/24/pgpool-ii-in-practice.html</guid>
        
        
        <category>infra</category>
        
      </item>
    
      <item>
        <title>Introducing the Nerds</title>
        <description>&lt;p&gt;This is the new home of the nerd-rage rants of the meter.md engineering crew.
This isn’t an official publication, but will be more interesting.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 15:52:14 -0400</pubDate>
        <link>https://mieko.dev/meta/2016/09/24/introducing-angry-nerds.html</link>
        <guid isPermaLink="true">https://mieko.dev/meta/2016/09/24/introducing-angry-nerds.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
  </channel>
</rss>
